{
  "name": "Selenium",
  "tagline": "A browser automation framework and ecosystem.",
  "body": "# Selenium\r\n\r\nSelenium is an umbrella project encapsulating a variety of tools and \r\nlibraries enabling web browser automation. Selenium specifically \r\nprovides infrastructure for the [W3C WebDriver specification](https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html) \r\n— a platform and language-neutral coding interface compatible with all \r\nmajor web browsers.\r\n\r\nThe project is made possible by volunteer contributors who've \r\ngenerously donated thousands of hours in code development and upkeep. \r\n\r\nSelenium's source code is made available under the [Apache 2.0 license](https://github.com/SeleniumHQ/selenium/blob/master/LICENSE).\r\n\r\n## Documentation\r\n\r\nNarrative documentation:\r\n\r\n* [User Manual](http://docs.seleniumhq.org/docs/)\r\n* [New Handbook](https://seleniumhq.github.io/docs/) (work in progress)\r\n\r\nAPI documentation:\r\n\r\n* [C#](http://seleniumhq.github.io/selenium/docs/api/dotnet/)\r\n* [JavaScript](http://seleniumhq.github.io/selenium/docs/api/javascript/)\r\n* [Java](http://seleniumhq.github.io/selenium/docs/api/java/index.html)\r\n* [Python](http://seleniumhq.github.io/selenium/docs/api/py/)\r\n* [Ruby](http://seleniumhq.github.io/selenium/docs/api/rb/)\r\n\r\n## Pull Requests\r\n\r\nPlease read [CONTRIBUTING.md](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md) \r\nbefore submitting your pull requests.\r\n\r\n## Building\r\n\r\nSelenium uses a custom build system aptly named\r\n[crazyfun](https://github.com/SeleniumHQ/selenium/wiki/Crazy-Fun-Build)\r\navailable on all fine platforms (Linux, Mac, Windows).  We are in the\r\nprocess of replacing crazyfun with\r\n[buck](http://facebook.github.io/buck/), so don't be alarmed if you\r\nsee directories carrying multiple build directive files.\r\nFor reference, crazyfun's build files are named *build.desc*,\r\nwhile buck's are named simply *BUCK*.\r\n\r\nBefore building ensure that you have the \r\n[most recent `chromedriver` ](https://sites.google.com/a/chromium.org/chromedriver/downloads)\r\navailable on your `$PATH`.  \r\n\r\nTo build Selenium, in the same directory as this file:\r\n\r\n```sh\r\n./go build\r\n```\r\n\r\nThe order of building modules is determined by the build system.\r\nIf you want to build an individual module\r\n(assuming all dependent modules have previously been built),\r\ntry the following:\r\n\r\n```sh\r\n./go //javascript/atoms:test:run\r\n```\r\n\r\nIn this case, `javascript/atoms` is the module directory,\r\n`test` is a target in that directory's `build.desc` file,\r\nand `run` is the action to run on that target.\r\n\r\nAs you see *build targets* scroll past in the log,\r\nyou may want to run them individually.\r\ncrazyfun can run them individually,\r\nby target name as long as `:run` is appended (see above).\r\n\r\nTo list all available targets, you can append the `-T` flag:\r\n\r\n```sh\r\n./go -T\r\n```\r\n\r\n### Buck\r\n\r\nAlthough the plan is to return to a vanilla build of Buck as soon as\r\npossible, we currently use a fork hosted at\r\nhttps://github.com/SeleniumHQ/buck To build using Buck, first clone that\r\nrepo and build using ant. Then add Buck's \"bin\" directory to your\r\nPATH.\r\n\r\nTo obtain a list of all available targets:\r\n\r\n```sh\r\nbuck targets\r\n```\r\n\r\nAnd build a particular file:\r\n\r\n```sh\r\nbuck build //java/client/src/org/openqa/selenium:webdriver-api\r\n```\r\n\r\nThere are aliases for commonly invoked targets in the `.buckconfig`\r\nfile, and these aliases can be invoked directly:\r\n\r\n```sh\r\nbuck build htmlunit\r\n```\r\n\r\nAll buck output is stored under \"buck-out\", with the outputs of build\r\nrules in `buck-out/gen`.\r\n\r\nIf you are doing a number of incremental builds, then you may want to\r\nuse `buckd`, which starts a long-lived buck process to watch outputs\r\nand input files. If you do this, consider using `watchman` too, since\r\nthe Java 7 file watcher isn't terribly efficient. This can be cloned\r\nfrom https://github.com/facebook/watchman\r\n\r\n## Requirements\r\n\r\n* [Java 8 JDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\r\n* `java` and `jar` on the PATH\r\n\r\nAlthough the build system is based on rake it's **strongly advised**\r\nto rely on the version of JRuby in `third_party/` that is invoked by\r\n`go`.  The only developer type who would want to deviate from this is\r\nthe “build maintainer” who's experimenting with a JRuby upgrade.\r\n\r\nNote that all Selenium Java artefacts are **built with Java 8\r\n(mandatory)**.  Those _will work with any Java >= 8_.\r\n\r\n### Optional Requirements\r\n\r\n* Python 2.6.x to 2.7 (without this, Python tests will be skipped)\r\n* Ruby 1.9.3\r\n\r\n### Internet Explorer Driver\r\n\r\nIf you plan to compile the\r\n[IE driver](https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver)\r\nyou also need:\r\n\r\n* [Visual Studio 2008](http://www.microsoft.com/visualstudio/en-gb/products/2008-editions)\r\n* 32 and 64 bit cross compilers\r\n\r\nThe build will work on any platform, but the tests for IE will be \r\nskipped silently, if you are not building on Windows.\r\n\r\n## Common Tasks\r\n\r\nFor an express build of the binaries we release run the following from \r\nthe directory containing the `Rakefile`:\r\n\r\n```sh\r\n./go release\r\n```\r\n\r\nAll build output is placed under the `build` directory. The output can\r\nbe found under `build/dist`.  If an error occurs while running this\r\ntask complaining about a missing Albacore gem, the chances are you're\r\nusing `rvm`.  If this is the case, switch to the system ruby:\r\n\r\n```sh\r\nrvm system\r\n```\r\n\r\nOf course, building the entire project can take too long. If you just\r\nwant to build a single driver, then you can run one of these targets:\r\n\r\n```sh\r\n./go chrome\r\n./go firefox\r\n./go htmlunit\r\n./go ie\r\n```\r\n\r\nAs the build progresses, you'll see it report where the build outputs\r\nare being placed.  Of course, just building isn't enough.  We should\r\nreally be able to run the tests too.  Try:\r\n\r\n```sh\r\n./go test_chrome\r\n./go test_firefox\r\n./go test_htmlunit\r\n./go test_ie\r\n```\r\n\r\nNote that the `test_chrome` target requires that you have the separate\r\n[Chrome Driver](https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver)\r\nbinary available on your `PATH`.\r\n\r\nIf you are interested in a single language binding, try one of:\r\n\r\n```sh\r\n./go test_java\r\n./go test_dotnet\r\n./go test_rb\r\n./go test_javascript\r\n```\r\n\r\nTo run all the tests just run:\r\n\r\n```sh\r\n./go test\r\n```\r\n\r\nThis will detect your OS and run all the tests that are known to be\r\nstable for every browser that's appropriate to use for all language\r\nbindings.  This can take a healthy amount of time to run.\r\n\r\nTo run the minimal logical Selenium build:\r\n\r\n```sh\r\n./go test_javascript test_java\r\n```\r\n\r\nAs a side note, **none of the developers** run tests using\r\n[Cygwin](http://www.cygwin.com/).  It is very unlikely that the build\r\nwill work as expected if you try and use it.\r\n\r\n## Tour\r\n\r\nThe code base is generally segmented around the languages used to\r\nwrite the component.  Selenium makes extensive use of JavaScript, so\r\nlet's start there.  Working on the JavaScript is easy.  First of all,\r\nstart the development server:\r\n\r\n```sh\r\n./go debug-server\r\n```\r\n\r\nNow navigate to\r\n[http://localhost:2310/javascript](http://localhost:2310/javascript).\r\nYou'll find the contents of the `javascript/` directory being shown.\r\nWe use the [Closure\r\nLibrary](https://developers.google.com/closure/library/) for\r\ndeveloping much of the javascript, so now navigate to\r\n[http://localhost:2310/javascript/atoms/test](http://localhost:2310/javascript/atoms/test).\r\n\r\nThe tests in this directory are normal HTML files with names ending\r\nwith `_test.html`.  Click on one to load the page and run the test. You\r\ncan run all the javascript tests using:\r\n\r\n```sh\r\n./go test_javascript\r\n```\r\n\r\n## Maven POM files\r\n\r\nHere is the [public Selenium Maven\r\nrepository](http://repo1.maven.org/maven2/org/seleniumhq/selenium/).\r\n\r\n## Build Output\r\n\r\n`./go` only makes a top-level `build` directory.  Outputs are placed\r\nunder that relative to the target name. Which is probably best\r\ndescribed with an example.  For the target:\r\n\r\n```sh\r\n./go //java/client/src/org/openqa/selenium:selenium-api\r\n```\r\n\r\nThe output is found under:\r\n\r\n```sh\r\nbuild/java/client/src/org/openqa/selenium/selenium-api.jar\r\n```\r\n\r\nIf you watch the build, each step should print where its output is\r\ngoing.  Java test outputs appear in one of two places: either under\r\n`build/test_logs` for [JUnit](http://junit.org/) or in\r\n`build/build_log.xml` for [TestNG](http://testng.org/doc/index.html)\r\ntests.  If you'd like the build to be chattier, just append `log=true`\r\nto the build command line.\r\n\r\n# Help with *go*\r\n\r\nMore general, but basic, help for *go*…\r\n\r\n```sh\r\n./go --help\r\n```\r\n\r\nRemember, *go* is just a wrapper around\r\n[Rake](http://rake.rubyforge.org/), so you can use the standard\r\ncommands such as `rake -T` to get more information about available\r\ntargets.\r\n\r\n## Maven _per se_\r\n\r\nIf it is not clear already, Selenium is not built with Maven, it is\r\nbuilt with [Buck](https://github.com/SeleniumHQ/buck), \r\nthough that is invoked with *go* as outlined above so you do not really \r\nhave to learn too much about that.\r\n\r\nThat said, it is possible to relatively quickly build selenium pieces\r\nfor Maven to use. You are only really going to want to do this when\r\nyou are testing the cutting-edge of Selenium development (which we\r\nwelcome) against your application.  Here is the quickest way to build\r\nand deploy into you local maven repository (`~/.m2/repository`), while\r\nskipping Selenium's own tests.\r\n\r\n```sh\r\n./go maven-install\r\n```\r\n\r\nThe maven jars should now be in your local ~/.m2/repository. You can also publish\r\ndirectly using Buck:\r\n\r\n```sh\r\nbuck publish -r your-repo //java/client/src/org/openqa/selenium:selenium\r\n```\r\n\r\nThis sequence will push some seven or so jars into your local Maven\r\nrepository with something like 'selenium-server-3.0.0.jar' as\r\nthe name.\r\n\r\n## Useful Resources\r\n\r\nRefer to the [Building Web\r\nDriver](https://github.com/SeleniumHQ/selenium/wiki/Building-WebDriver) \r\nwiki page for the last word on building the bits and pieces of Selenium.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}